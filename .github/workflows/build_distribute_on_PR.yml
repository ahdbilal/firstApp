name: build_distribute_on_PR

on: 
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Sign Android Release
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: build
        path: app/build/outputs/apk
        
    - name: Setup Python
      uses: actions/setup-python@v1.2.0
    
    - name: Read Configuration
      id: dist_config
      run: |
        pip install PyYAML
        destinations=$(echo $GITHUB_REF | python3 .github/workflows/lib/read_dist_config.py "destinations")
        notify_testers=$(echo $GITHUB_REF | python3 .github/workflows/lib/read_dist_config.py "notify_testers")
        prerelease=$(echo $GITHUB_REF | python3 .github/workflows/lib/read_dist_config.py "prerelease")
        release_type=$(echo $GITHUB_REF | python3 .github/workflows/lib/read_dist_config.py "release_type")
        draft=$(echo $GITHUB_REF | python3 .github/workflows/lib/read_dist_config.py "draft")
        echo "::set-output name=destinations::"${destinations//\'}""
        echo "::set-output name=notify_testers::"${notify_testers//\'}""
        echo "::set-output name=prerelease::"${prerelease//\'}""
        echo "::set-output name=release_type::"${release_type//\'}""
        echo "::set-output name=draft::"${draft//\'}""
        echo $prerelease
        echo $release_type
        echo $draft
    
    - name: Distribute with App Center
      uses: ahdbilal/AppCenter-Github-Action@v1.0.3
      with:
        command: appcenter distribute release -f app/build/outputs/apk/release/app-release-unsigned-signed.apk -a ${{ secrets.APP_NAME }} -g ${{ steps.dist_config.outputs.destinations }}
        token: ${{secrets.APP_CENTER_TOKEN}}
    
    - name: Get Release Details
      id: release-details
      run: |
        temp=$(curl -X GET "https://api.appcenter.ms/v0.1/apps/${{ secrets.APP_NAME }}/distribution_groups/${{ steps.dist_config.outputs.destinations }}/releases/latest" -H "accept: application/json" -H "X-API-Token: ${{secrets.APP_CENTER_TOKEN}}")
        echo $temp
        id=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
        app_name=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['app_name'])")
        version=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['short_version'])")
        echo "::set-output name=id::$id"
        echo "::set-output name=app_name::$app_name"
        echo "::set-output name=version::$version"
        org=$(echo ${{ secrets.APP_NAME }} | python -c 'import sys;print(sys.stdin.read().splitlines()[0].split("/")[0])')
        app=$(echo ${{ secrets.APP_NAME }} | python -c 'import sys;print(sys.stdin.read().splitlines()[0].split("/")[1])')
        echo "::set-output name=link::https://install.appcenter.ms/users/$org/apps/$app/releases/$id"
        pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        echo "::set-output name=pull_number::$pull_number"
    
    - name: Create a Release
      id: create-release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: v${{ steps.release-details.outputs.version }}.${{ steps.dist_config.outputs.release_type }}-${{ secrets.GITHUB_TOKEN }}
          release_name: ${{ steps.release-details.outputs.app_name }} v${{ steps.release-details.outputs.version }}
          body: ${{ env.COMMIT_MESSAGE }}
          draft: ${{ steps.dist_config.outputs.draft }}
          prerelease: ${{ steps.dist_config.outputs.prerelease }}
    
    - name: Zip Build
      run: zip -r build.zip build
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: build.zip
        asset_name: build
        asset_content_type: application/zip
    
    - name: Create comment
      uses: peter-evans/create-or-update-comment@v1
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.release-details.outputs.pull_number }} ${{ secrets.GITHUB_TOKEN }}
          body: |
            Scan the code with your device camera, or visit this [install page][1] on your device browser:
            
            ![alt text](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${{ steps.release-details.outputs.link }})
            
            [1]: ${{ steps.release-details.outputs.link }}
    
