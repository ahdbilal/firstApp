name: distribute_app
on: [issue_comment]

jobs:
  label-pr:
    runs-on: ubuntu-latest
    steps:
      - name: listen for PR Comments
        uses: machine-learning-apps/actions-chatops@master
        with:
          TRIGGER_PHRASE: "/create-release"
        env: # you must supply GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: prcomm
      - name: checkout
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
        uses: actions/checkout@v2
      - name: Set up Python
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
        uses: actions/setup-python@v1.2.0
      - name: Download a Build Artifact from Azure Blob Storage
        uses: fixpoint/azblob-download-artifact@v3
        with:
          connection-string: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}      
          name: build
          path: build
      - uses: technote-space/get-git-comment-action@v1
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
      - name: Get commit message
        run: 
              zip -r build.zip build
              echo "${{ env.COMMIT_MESSAGE }}" > release_notes.txt
              cat release_notes.txt
      - name: Distribute release
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
        uses: ahdbilal/AppCenter-Github-Action@v1.0.3
        with:
          command: appcenter distribute release -f build/release/app-release-unsigned-signed.apk -a ahbilal-microsoft.com/firstApp -R release_notes.txt
          token: ${{secrets.APP_CENTER_TOKEN}}
      - name: Get release link
        id: release
        run: |
          temp=$(curl -X GET "https://api.appcenter.ms/v0.1/apps/ahbilal-microsoft.com/firstApp/distribution_groups/privateA/releases/latest" -H "accept: application/json" -g PrivateA -H "X-API-Token: 48795f81b653dcbad31bbb403f21b49d538badb3")
          id=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
          app_name=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['app_name'])")
          version=$(echo $temp | python3 -c "import sys, json; print(json.load(sys.stdin)['short_version'])")
          echo "::set-output name=id::$id"
          echo "::set-output name=app_name::$app_name"
          echo "::set-output name=version::$version"
          echo "::set-output name=link::https://install.appcenter.ms/users/ahbilal-microsoft.com/apps/firstApp/releases/$id"
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "::set-output name=pull_number::$pull_number"
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.id }}
          release_name: ${{ steps.release.outputs.app_name }} v${{ steps.release.outputs.version }}
          body: ${{ env.COMMIT_MESSAGE }}
          #draft: # optional
          #prerelease: # optional
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip
      - uses: andymckay/labeler@1.0.2
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          add-labels: "distribute complete"
          ignore-if-assigned: true

      
